BST - REST API for integrating external applications
====================================================

Overview
--------

:doc:`BST <./index>`-based solutions can take advantage of a REST-based API which allows external
applications outside of Zato to take part in BST-controlled processes regardless of a particular technology the applications
are written in, Java, .NET, JavaScript, PHP or any other.

All of the parameters input parameters for endpoints documented belowcan be provided either in URL query string
or in JSON payload. The former takes precedence in case of conflicts.

Default user credentials to call the API are those set during :doc:`installation <./install>`.

/bst/can-transition
-------------------

Returns information whether transition of an object to a new state from the current one is possible within the definition provided on input.

Input:

==================== ======== ===================== ==========================================================================================================
Parameter            Required Default value         Notes
==================== ======== ===================== ==========================================================================================================
object_type          Yes      (None)                Object type to dry-run the transition for
object_id            Yes      (None)                Object's ID
state_new            Yes      (None)                New state the object should attain
def_name             ---      (None)                If the object belongs to more than one definition, the definition's name
def_version          ---      1                     If the object belongs to more than one definition, the definition's version
force                ---      False                 Whether the transition should be :ref:`forced <proc-bst-progguide-force>`
==================== ======== ===================== ==========================================================================================================

Output:

==================== ======== ===================== ==========================================================================================================
Parameter            Required Default value         Notes
==================== ======== ===================== ==========================================================================================================
can_transition       Yes      (None)                Boolean True/False depending on whether the transition is feasible
state_old            Yes      (None)                Old state of the object after the transition, may be None/null if the new state is one of start ones
                                                    for the definition
state_new            Yes      (None)                Rewritten from request
reason               ---      (None)                If can_transition is False, the reason as to why the transition is not possible
==================== ======== ===================== ==========================================================================================================

::

  $ cat cust.json
  {
   "object_type":"Customer",
   "object_id":"2",
   "state_new":"Welcome message sent"
  }
  $

::

  $ curl http://bst:$PWD@localhost:17010/bst/can-transition -d @cust.json
  {"response":
   {
    "can_transition": false,
    "state_old": "Consent given",
    "state_new": "Welcome message sent",
    "reason": "No transition found from `Consent given` to \
     `Welcome message sent` for `Customer.2` in `Open.Account.v1`",
   }
  }
  $


/bst/transition
---------------

Performs a transition between states of a business object.

Input:

==================== ======== ===================== ==========================================================================================================
Parameter            Required Default value         Notes
==================== ======== ===================== ==========================================================================================================
object_type          Yes      (None)                (As in /bst/can-transition)
object_id            Yes      (None)                ″
state_new            Yes      (None)                ″
def_name             ---      (None)                ″
def_version          ---      1                     ″
force                ---      False                 ″
user_ctx             ---      (None)                An arbitrary string of opaque data to be attached to the transition
==================== ======== ===================== ==========================================================================================================

Output:

==================== ======== ===================== ==========================================================================================================
Parameter            Required Default value         Notes
==================== ======== ===================== ==========================================================================================================
can_transition       Yes      (None)                Boolean True/False depending on whether the transition is feasible
state_old            Yes      (None)                ″
state_new            Yes      (None)                ″
reason               ---      (None)                ″
==================== ======== ===================== ==========================================================================================================

::

  $ cat cust.json
  {
   "object_type":"Customer",
   "object_id":"2",
   "state_new":"Consent given"
  }
  $

::

  $ curl http://bst:$PWD@localhost:17010/bst/transition -d @cust.json
  {"response":
   {
    "can_transition": true,
    "state_old": null,
    "state_new": "Consent given",
    "reason": ""
    }
  }


/bst/mass-transition
--------------------

Performs a transition on each element from the input list. Each element's input format must be the same as in the
/bst/transition endpoint. Stops upon encountering first error, if any.

/bst/get-history
----------------

Returns history of transitions for a given object.

Input:

==================== ======== ===================== ==========================================================================================================
Parameter            Required Default value         Notes
==================== ======== ===================== ==========================================================================================================
object_type          Yes      (None)                Object type to return the history for
object_id            Yes      (None)                Object's ID
==================== ======== ===================== ==========================================================================================================

Output:

==================== ======== ===================== ==========================================================================================================
Parameter            Required Default value         Notes
==================== ======== ===================== ==========================================================================================================
state_old            Yes      (None)                Object's state before the transition, possibly None/null.
state_current        Yes      (None)                Object's current state, never None/null.
transition_ts_utc    Yes      (None)                Transition's timestamp, in UTC.
def_tag              Yes      (None)                Object definition's tag - include the latter's name and version
object_tag           Yes      (None)                Object's tag - its name + ID
user_ctx             Yes      (None)                User context attached to the transition
server_ctx           Yes      (None)                Zato server's context attached automatically to the transition
is_forced            Yes      (None)                Whether the transition was :ref:`forced <proc-bst-progguide-force>`
==================== ======== ===================== ==========================================================================================================

::

  $ cat cust.json
  {
   "object_type":"Customer",
   "object_id":"1"
  }
  $

::

  $ curl http://bst:$PWD@localhost:17010/bst/get-history -d @cust.json
  [
    {
      "state_old": null, 
      "state_current": "Consent given", 
      "def_tag": "Open.Account.v1", 
      "object_tag": "Customer.1", 
      "transition_ts_utc": "2015-10-12T16:01:28.343996", 
      "user_ctx": "",
      "server_ctx": "",
      "is_forced": false
    }, 
    {
      "state_old": "Consent given", 
      "state_current": "Has account", 
      "def_tag": "Open.Account.v1", 
      "object_tag": "Customer.1", 
      "transition_ts_utc": "2015-10-12T16:01:37.026237", 
      "user_ctx": "",
      "server_ctx": "",
      "is_forced": false
    }, 
    {
      "state_old": "Has account", 
      "state_current": "Welcome message sent", 
      "def_tag": "Open.Account.v1", 
      "object_tag": "Customer.1", 
      "transition_ts_utc": "2015-10-12T16:01:51.746802", 
      "user_ctx": "",
      "server_ctx": "",
      "is_forced": false
    }
  ]
  $

/bst/get-definition-list
------------------------

Returns all BST definitions in a Zato cluster.

(No input parameters)

::

  $ curl http://bst:$PWD@localhost:17010/bst/get-definition-list
  [
    {
      "Account": {
        "objects": "Customer", 
        "Consent given": "Has account", 
        "Has account": "Welcome message sent"
      }
    }
  ]
  $
