
.. highlight:: python
   :linenothreshold: 0

User.change_password - Python API
=================================

Changes a user's password. Regular users may only change their own passwords and super-users may change any other person's
password. No matter who is changing the password, the new one must confirm to the :doc:`configuration <../../../config/index>`.

Super-users may also set password expiry and a flag indicating that the referenced user change his or her password the next
time this person logs in.

API
---

self.sso.user.change_password
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. py:method:: change_password(self, current_ust, current_app, remote_addr)

  Changes a user's password. Either current user's, as identified by current_ust or another person's, if user_id
  is in the 'data' dictionary.

  :param data: A dictionary of input values to change the password with

               ===================== ======== ======== ================ =====================================================================
               Name                  Datatype Optional Needs super-user Notes
               ===================== ======== ======== ================ =====================================================================
               old_password          string   Yes      ---              Required if current user changes his or her own password
               new_password          string   ---      ---              New password to set
               user_id               string   Yes      Yes              Required if a super-user wants to change another person's password
               password_expiry       datetime Yes      Yes              Optionally, when should the password expire, in the format of
                                                                        YYYY-MM-DDThh:mm:ss, in UTC. If not set, a default
                                                                        value from :doc:`configuration <../../../config/index>` will be used.
               password_must_change  bool     Yes      Yes              If True, the person whose password is being change will need to reset
                                                                        it on next login
               ===================== ======== ======== ================ =====================================================================

  :type data: dict

  :param current_ust: Current user's UST
  :type current_ust: string

  :param current_app: Name of application the current user is issuing the call from
  :type current_app: string

  :param remote_addr: User's remote address
  :type remote_addr: string

  :rtype: A dictionary of attributes out of which only user_id and username are guaranteed to always exist. The rest is optional
          and additionally, some of attributes are returned, if they exist at all, only if current user is a super-user.

          Accessible no matter the user type is:

          * user_id
          * username
          * email
          * display_name
          * first_name
          * middle_name
          * last_name

          Accessible to super-users only:

          * is_active
          * is_internal
          * is_super_user
          * is_approved
          * is_locked
          * locked_time
          * creation_ctx
          * locked_by
          * approv_rej_time
          * approv_rej_by
          * password_expiry
          * password_is_set
          * password_must_change
          * password_last_set
          * sign_up_status
          * sign_up_time

::

  # -*- coding: utf-8 -*-

  from __future__ import absolute_import, division, print_function, unicode_literals

  # Zato
  from zato.server.service import Service

  class ChangePasswordCurrentUser(Service):

      def handle(self):

          # Data obtained from request and/or WSGI environment
          ust = 'gAAAAABalFycY50Budi...'
          current_app = 'CRM'
          remote_addr = '127.0.0.1'

          # Get user by UST
          user_info = self.sso.user.get_current_user(ust, current_app, remote_addr)

          # Log output for confirmation
          self.logger.info(user_info)
